<%-include("partials/header")%>

<div class="navBar">
    <span class="navvy"><button class=" btn btn-blue signOutButton">Sign Out</button></span>
   
</div>
<div class="container">
    <div class="jumbo">
        <h4 class="animated fadeInDown">Poll Results</h4>
  
        <% data.forEach(pollData => { %>
          <% if (<%= pollData.poll.question %>) { %>
            <h5><%= pollData.poll.question %></h5><br>
          <% } else { %>
            <h5><%= "working on it" %></h5><br>
          <% } %>
        
      <% }) %>
        <canvas id="myChart"></canvas>
       </div>
       
    </div>

    <script>



        
        const dataObj = {};


          const createHashTable = (votes) => {
            
            // check if votes passed in, is an array, if not create new array
            if (!Array.isArray(votes) && typeof votes === 'string') {
              votes = votes.split('/n');
              console.log(votes);
            } else if (!Array.isArray(votes) && typeof votes === 'object') {
              console.log(`wrong format`);
              return false;
            }

            //loop through the array

            votes.forEach(currWord => {
              //if the current word is not in the object add the word and set value to 0
              if (!dataObj[currWord]) {
                dataObj[currWord] = 0;
              }
              // increment the value for each word + 1
              dataObj[currWord]++;
            })
            //return the new obj hash table
            console.log(dataObj);
            return dataObj;
          };
      
        
        
        const voteData = createHashTable("<%= data[0].vote %>");
        console.log("votedata", "<%= data[0].vote %>")
        var data = Object.values(voteData);
        var label = Object.keys(voteData);
        console.log("label", label);
          
        
        // create an object defining colors to be called later for formatting
        window.chartColors = {    // Legend colors
                  red: 'rgb(255, 99, 132)',
                  orange: 'rgb(255, 159, 64)',
                  yellow: 'rgb(255, 205, 86)',
                  green: 'rgb(75, 192, 192)',
                  blue: 'rgb(54, 162, 235)',
                  purple: 'rgb(153, 102, 255)',
                  grey: 'rgb(201, 203, 207)',
                  teal: 'rgb(0,128,128)' ,
                  pink: 'rgb(255,0,255)',
                  lightBlue: 'rgb(0,255,255)'            
              };
      
          // grab the location where the chart will be drawn, and attach it to the variable chartDiv
        var chartDiv = document.getElementById('myChart').getContext('2d');
      
          // build the chart by initiating the "chart" class defined in the charts.js library
          // pass in the node, jQuery instance, or 2d context of the canvas of where the chart will be drawn (chartDiv)
          // define the chart type, populate "data" with arrays for datasets and labels, and populate "options" with any formatting preferences
        var resultsPie = new Chart(chartDiv, {
          type: 'doughnut',
          data: {
            datasets: [{
              data: data,
              backgroundColor: [
              window.chartColors.red,
              window.chartColors.orange,
              window.chartColors.yellow,
              window.chartColors.green,
              window.chartColors.blue,
              window.chartColors.purple,
              window.chartColors.grey,
              window.chartColors.teal,
              window.chartColors.pink,
              window.chartColors.lightBlue
              ]
            }],
            labels: label
          },
          options: {
            responsive: true,
            legend: {
                display: true,
                position: 'bottom'
            }
          
          }

          
          
          }); 


          const createHashTable = (votes) => {
            
            // check if votes passed in, is an array, if not create new array
            if (!Array.isArray(array) && typeof votes === 'string') {
              votes = votes.split(' ');
            } else if (!Array.isArray(votes) && typeof votes === 'object') {
              console.log(`wrong format`);
              return false;
            }

            //loop through the array

            votes.forEach(currWord => {
              //if the current word is not in the object add the word and set value to 0
              if (!dataObj[currWord]) {
                dataObj[currWord] = 0;
              }
              // increment the value for each word + 1
              dataObj[currWord]++;
            })
            //return the new obj hash table
            return dataObj;
          };


      
        // Function to refresh chart on receipt of new data
        let updateChart = function(newData){
          // create empty arrays to hold the data values and label values

      
           //  run a for loop that will loop through the number of indexes in the new vote data submitted ("newData")
           // the number of indexes should correspond to the number of voting options
        for(var i = 0; i < newData.value.length; i++){
            // update the vote count by adding the existing vote count in each index of the array to the new vote count in the corresponding index of the
            // "newData" array
          data[i] = data[i] + newData.value[i];
            // set the list of vote options equal to the options sent over in "newData". This should establish the list of options on the first send
            // and paste over with the same list on each subsequent send.
          label[i] = newData.label[i];
        }
      
        // execute the chart.update() function. This is a function in the charts.js library
        chart.update();
        };
        

        
          

      // function refreshChart(){
      //                 chart.update();
      //             }
          </script>
      

<%-include("partials/footer")%>